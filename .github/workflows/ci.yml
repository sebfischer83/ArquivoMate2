name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

# Add permissions for beautiful test reports and PR comments
permissions:
  contents: read
  checks: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better coverage comparison

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore NuGet packages (cache)
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-packages-${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj', '**/*.props', '**/*.targets') }}
          restore-keys: |
            nuget-packages-${{ runner.os }}-

      - name: Dotnet restore
        run: dotnet restore ArquivoMate2.sln

      - name: Build
        run: dotnet build ArquivoMate2.sln --configuration Release --no-restore

      - name: Run tests with coverage (collect XPlat Code Coverage and TRX)
        continue-on-error: true
        id: test
        run: |
          mkdir -p TestResults
          dotnet test ArquivoMate2.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Install ReportGenerator
        if: always()
        run: dotnet tool install -g dotnet-reportgenerator-globaltool --version 5.* || true

      - name: Generate coverage report
        if: always()
        env:
          PATH: ${{ env.PATH }}:/home/runner/.dotnet/tools
        run: |
          # find coverage files produced by the tests (coverage.cobertura.xml)
          echo "Coverage files:"
          find . -type f -name 'coverage.cobertura.xml' -print || true
          reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:coverage-report -reporttypes:Html;Cobertura;TextSummary;Badges;MarkdownSummaryGithub || true
          echo "Generated coverage report in coverage-report/index.html"

      # Beautiful test report visualization
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET Test Results
          path: '**/TestResults/*.trx'
          reporter: dotnet-trx
          fail-on-error: false
          fail-on-empty: false

      # Code coverage comment on PRs
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        with:
          filename: coverage-report/Cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload test results and coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            TestResults/
            **/TestResults/
            coverage-report/

      - name: Print coverage summary and annotate job summary
        if: always()
        env:
          GITHUB_STEP_SUMMARY: ${{ env.GITHUB_STEP_SUMMARY }}
        run: |
          if [ -f coverage-report/Summary.txt ]; then
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat coverage-report/Summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # extract the first percent value from the summary (e.g. "Coverage: 85%")
            percent=$(grep -m1 -Eo '[0-9]+\.[0-9]+%|[0-9]+%' coverage-report/Summary.txt || true)
            if [ -n "$percent" ]; then
              echo "**Overall coverage:** $percent" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Add markdown summary if available
            if [ -f coverage-report/SummaryGithub.md ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              cat coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No coverage summary found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Print coverage summary to log
        if: always()
        run: |
          if [ -f coverage-report/Summary.txt ]; then
            cat coverage-report/Summary.txt
          else
            echo "No coverage summary found"
          fi

      # Fail the job if tests failed, but only at the very end
      - name: Check test results
        if: steps.test.outcome == 'failure'
        run: |
          echo "::error::Tests failed. Check the test report for details."
          exit 1

  publish-pages:
    name: Publish coverage report to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download coverage-report artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: coverage-report-artifact

      - name: Prepare coverage report for Pages
        run: |
          if [ -d coverage-report-artifact/coverage-report ]; then
            cp -r coverage-report-artifact/coverage-report .
          else
            echo "coverage-report not found in artifact" && exit 0
          fi

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

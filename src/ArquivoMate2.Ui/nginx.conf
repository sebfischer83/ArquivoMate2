# Nginx config for Angular SPA with client-side routing
server {
    listen       8080;
    server_name  _;

    # gzip (can be adjusted further)
    gzip on;
    gzip_types text/plain text/css application/javascript application/json application/manifest+json image/svg+xml;
    gzip_min_length 1024;

    # Brotli: enable if the nginx build includes the ngx_brotli module.
    # Note: the official nginx image does not include brotli by default.
    # If brotli is not available, these directives will be ignored or cause an error
    # depending on your nginx build. If you don't have the module, you can still
    # benefit from pre-compressed .br files via the logic below.
    # Uncomment the next lines if your nginx includes ngx_brotli
    # brotli on;
    # brotli_comp_level 5;
    # brotli_types text/plain text/css application/javascript application/json application/manifest+json image/svg+xml;

    root /usr/share/nginx/html;
    index index.html;

    # Try direct file, else fallback to index.html (SPA routing)
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets aggressively (Angular outputs content-hashed filenames)
    # Prefer serving pre-compressed Brotli (.br) or gzip (.gz) versions when available
    location ~* \.(?:js|css|woff2?|eot|ttf|otf|svg)$ {
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header Vary Accept-Encoding;

        # If the client supports br and a .br file exists, serve it and set header
        if ($http_accept_encoding ~* "br") {
            if (-f $request_filename.br) {
                add_header Content-Encoding br;
                try_files $uri.br =404;
            }
        }

        # If the client supports gzip and a .gz file exists, serve it
        if ($http_accept_encoding ~* "gzip") {
            if (-f $request_filename.gz) {
                add_header Content-Encoding gzip;
                try_files $uri.gz =404;
            }
        }

        # Fallback to normal file
        try_files $uri =404;
    }

    # Runtime config JSON (donâ€™t cache heavily so environment swaps are visible)
    location ~* /(runtime-config\.json)$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html { root /usr/share/nginx/html; }
}

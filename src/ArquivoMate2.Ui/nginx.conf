# Nginx config for Angular SPA with client-side routing

# Map client Accept-Encoding to a preferred compressed extension.
# This sets $precompressed_ext to ".br" if client accepts br, else ".gz" if gzip accepted, else empty.
map $http_accept_encoding $precompressed_ext {
    ~br   ".br";
    ~gzip ".gz";
    default "";
}

# Map the selected extension to a Content-Encoding header value.
map $precompressed_ext $content_encoding {
    ".br"  "br";
    ".gz"  "gzip";
    default "";
}

server {
    # Listen on the container HTTP port (80). The docker run maps host:container externally.
    listen       80;
    server_name  _;

    # gzip (can be adjusted further)
    gzip on;
    gzip_types text/plain text/css application/javascript application/json application/manifest+json image/svg+xml;
    gzip_min_length 1024;

    # Brotli: enable if the nginx build includes the ngx_brotli module.
    # Note: the official nginx image does not include brotli by default.
    # If brotli is not available, these directives will be ignored or cause an error
    # depending on your nginx build. If you don't have the module, you can still
    # benefit from pre-compressed .br files via the logic below.
    # Uncomment the next lines if your nginx includes ngx_brotli
    # brotli on;
    # brotli_comp_level 5;
    # brotli_types text/plain text/css application/javascript application/json application/manifest+json image/svg+xml;

    root /usr/share/nginx/html;
    index index.html;

    # Try direct file, else fallback to index.html (SPA routing)
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets aggressively (Angular outputs content-hashed filenames)
    # Prefer serving pre-compressed Brotli (.br) or gzip (.gz) versions when available
    location ~* \.(?:js|css|woff2?|eot|ttf|otf|svg)$ {
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header Vary Accept-Encoding;

        # Try the precompressed file first if the client supports it.
        try_files $uri$precompressed_ext $uri =404;

        # If a precompressed version was selected, set the corresponding Content-Encoding header.
        # $content_encoding is set via the map above and will be empty if no compression was selected.
        add_header Content-Encoding $content_encoding;
    }

    # Runtime config JSON (donâ€™t cache heavily so environment swaps are visible)
    location = /runtime-config.json {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html { root /usr/share/nginx/html; }
}

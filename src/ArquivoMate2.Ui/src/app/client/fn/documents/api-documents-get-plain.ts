/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { DocumentListDtoApiResponse } from '../../models/document-list-dto-api-response';

export interface ApiDocumentsGet$Plain$Params {
  Page?: number;
  PageSize?: number;
  Type?: string;
  Accepted?: boolean;
  FromDate?: string;
  ToDate?: string;
  MinTotalPrice?: number;
  MaxTotalPrice?: number;
  CustomerNumber?: string;
  InvoiceNumber?: string;
  Keywords?: Array<string>;
  KeywordMatchAll?: boolean;
  CollectionIds?: Array<string>;
  Year?: number;
  Month?: number;
  Language?: string;
  Search?: string;
  SortBy?: string;
  SortDirection?: string;
}

export function apiDocumentsGet$Plain(http: HttpClient, rootUrl: string, params?: ApiDocumentsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentListDtoApiResponse>> {
  const rb = new RequestBuilder(rootUrl, apiDocumentsGet$Plain.PATH, 'get');
  if (params) {
    rb.query('Page', params.Page, {});
    rb.query('PageSize', params.PageSize, {});
    rb.query('Type', params.Type, {});
    rb.query('Accepted', params.Accepted, {});
    rb.query('FromDate', params.FromDate, {});
    rb.query('ToDate', params.ToDate, {});
    rb.query('MinTotalPrice', params.MinTotalPrice, {});
    rb.query('MaxTotalPrice', params.MaxTotalPrice, {});
    rb.query('CustomerNumber', params.CustomerNumber, {});
    rb.query('InvoiceNumber', params.InvoiceNumber, {});
    rb.query('Keywords', params.Keywords, {});
    rb.query('KeywordMatchAll', params.KeywordMatchAll, {});
    rb.query('CollectionIds', params.CollectionIds, {});
    rb.query('Year', params.Year, {});
    rb.query('Month', params.Month, {});
    rb.query('Language', params.Language, {});
    rb.query('Search', params.Search, {});
    rb.query('SortBy', params.SortBy, {});
    rb.query('SortDirection', params.SortDirection, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: 'text/plain', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<DocumentListDtoApiResponse>;
    })
  );
}

apiDocumentsGet$Plain.PATH = '/api/documents';

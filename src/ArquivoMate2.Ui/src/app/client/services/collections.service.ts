/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCollectionsGet$Json } from '../fn/collections/api-collections-get-json';
import { ApiCollectionsGet$Json$Params } from '../fn/collections/api-collections-get-json';
import { apiCollectionsGet$Plain } from '../fn/collections/api-collections-get-plain';
import { ApiCollectionsGet$Plain$Params } from '../fn/collections/api-collections-get-plain';
import { apiCollectionsIdAssignPost$Json } from '../fn/collections/api-collections-id-assign-post-json';
import { ApiCollectionsIdAssignPost$Json$Params } from '../fn/collections/api-collections-id-assign-post-json';
import { apiCollectionsIdAssignPost$Plain } from '../fn/collections/api-collections-id-assign-post-plain';
import { ApiCollectionsIdAssignPost$Plain$Params } from '../fn/collections/api-collections-id-assign-post-plain';
import { apiCollectionsIdDelete } from '../fn/collections/api-collections-id-delete';
import { ApiCollectionsIdDelete$Params } from '../fn/collections/api-collections-id-delete';
import { apiCollectionsIdDocumentsDocumentIdDelete } from '../fn/collections/api-collections-id-documents-document-id-delete';
import { ApiCollectionsIdDocumentsDocumentIdDelete$Params } from '../fn/collections/api-collections-id-documents-document-id-delete';
import { apiCollectionsIdGet$Json } from '../fn/collections/api-collections-id-get-json';
import { ApiCollectionsIdGet$Json$Params } from '../fn/collections/api-collections-id-get-json';
import { apiCollectionsIdGet$Plain } from '../fn/collections/api-collections-id-get-plain';
import { ApiCollectionsIdGet$Plain$Params } from '../fn/collections/api-collections-id-get-plain';
import { apiCollectionsIdPut$Json } from '../fn/collections/api-collections-id-put-json';
import { ApiCollectionsIdPut$Json$Params } from '../fn/collections/api-collections-id-put-json';
import { apiCollectionsIdPut$Plain } from '../fn/collections/api-collections-id-put-plain';
import { ApiCollectionsIdPut$Plain$Params } from '../fn/collections/api-collections-id-put-plain';
import { apiCollectionsPost$Json } from '../fn/collections/api-collections-post-json';
import { ApiCollectionsPost$Json$Params } from '../fn/collections/api-collections-post-json';
import { apiCollectionsPost$Plain } from '../fn/collections/api-collections-post-plain';
import { ApiCollectionsPost$Plain$Params } from '../fn/collections/api-collections-post-plain';
import { AssignResultDto } from '../models/assign-result-dto';
import { CollectionDto } from '../models/collection-dto';

@Injectable({ providedIn: 'root' })
export class CollectionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCollectionsGet()` */
  static readonly ApiCollectionsGetPath = '/api/collections';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsGet$Plain$Response(params?: ApiCollectionsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CollectionDto>>> {
    return apiCollectionsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsGet$Plain(params?: ApiCollectionsGet$Plain$Params, context?: HttpContext): Observable<Array<CollectionDto>> {
    return this.apiCollectionsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CollectionDto>>): Array<CollectionDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsGet$Json$Response(params?: ApiCollectionsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CollectionDto>>> {
    return apiCollectionsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsGet$Json(params?: ApiCollectionsGet$Json$Params, context?: HttpContext): Observable<Array<CollectionDto>> {
    return this.apiCollectionsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CollectionDto>>): Array<CollectionDto> => r.body)
    );
  }

  /** Path part for operation `apiCollectionsPost()` */
  static readonly ApiCollectionsPostPath = '/api/collections';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsPost$Plain$Response(params?: ApiCollectionsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CollectionDto>> {
    return apiCollectionsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsPost$Plain(params?: ApiCollectionsPost$Plain$Params, context?: HttpContext): Observable<CollectionDto> {
    return this.apiCollectionsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CollectionDto>): CollectionDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsPost$Json$Response(params?: ApiCollectionsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CollectionDto>> {
    return apiCollectionsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsPost$Json(params?: ApiCollectionsPost$Json$Params, context?: HttpContext): Observable<CollectionDto> {
    return this.apiCollectionsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CollectionDto>): CollectionDto => r.body)
    );
  }

  /** Path part for operation `apiCollectionsIdGet()` */
  static readonly ApiCollectionsIdGetPath = '/api/collections/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdGet$Plain$Response(params: ApiCollectionsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CollectionDto>> {
    return apiCollectionsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdGet$Plain(params: ApiCollectionsIdGet$Plain$Params, context?: HttpContext): Observable<CollectionDto> {
    return this.apiCollectionsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CollectionDto>): CollectionDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdGet$Json$Response(params: ApiCollectionsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CollectionDto>> {
    return apiCollectionsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdGet$Json(params: ApiCollectionsIdGet$Json$Params, context?: HttpContext): Observable<CollectionDto> {
    return this.apiCollectionsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CollectionDto>): CollectionDto => r.body)
    );
  }

  /** Path part for operation `apiCollectionsIdPut()` */
  static readonly ApiCollectionsIdPutPath = '/api/collections/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdPut$Plain$Response(params: ApiCollectionsIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CollectionDto>> {
    return apiCollectionsIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdPut$Plain(params: ApiCollectionsIdPut$Plain$Params, context?: HttpContext): Observable<CollectionDto> {
    return this.apiCollectionsIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CollectionDto>): CollectionDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdPut$Json$Response(params: ApiCollectionsIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CollectionDto>> {
    return apiCollectionsIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdPut$Json(params: ApiCollectionsIdPut$Json$Params, context?: HttpContext): Observable<CollectionDto> {
    return this.apiCollectionsIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CollectionDto>): CollectionDto => r.body)
    );
  }

  /** Path part for operation `apiCollectionsIdDelete()` */
  static readonly ApiCollectionsIdDeletePath = '/api/collections/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdDelete$Response(params: ApiCollectionsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCollectionsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdDelete(params: ApiCollectionsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCollectionsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiCollectionsIdAssignPost()` */
  static readonly ApiCollectionsIdAssignPostPath = '/api/collections/{id}/assign';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdAssignPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdAssignPost$Plain$Response(params: ApiCollectionsIdAssignPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<AssignResultDto>> {
    return apiCollectionsIdAssignPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdAssignPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdAssignPost$Plain(params: ApiCollectionsIdAssignPost$Plain$Params, context?: HttpContext): Observable<AssignResultDto> {
    return this.apiCollectionsIdAssignPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<AssignResultDto>): AssignResultDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdAssignPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdAssignPost$Json$Response(params: ApiCollectionsIdAssignPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<AssignResultDto>> {
    return apiCollectionsIdAssignPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdAssignPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCollectionsIdAssignPost$Json(params: ApiCollectionsIdAssignPost$Json$Params, context?: HttpContext): Observable<AssignResultDto> {
    return this.apiCollectionsIdAssignPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<AssignResultDto>): AssignResultDto => r.body)
    );
  }

  /** Path part for operation `apiCollectionsIdDocumentsDocumentIdDelete()` */
  static readonly ApiCollectionsIdDocumentsDocumentIdDeletePath = '/api/collections/{id}/documents/{documentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCollectionsIdDocumentsDocumentIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdDocumentsDocumentIdDelete$Response(params: ApiCollectionsIdDocumentsDocumentIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCollectionsIdDocumentsDocumentIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCollectionsIdDocumentsDocumentIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCollectionsIdDocumentsDocumentIdDelete(params: ApiCollectionsIdDocumentsDocumentIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiCollectionsIdDocumentsDocumentIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

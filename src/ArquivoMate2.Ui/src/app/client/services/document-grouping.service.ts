/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDocumentsGroupingPost$Json } from '../fn/document-grouping/api-documents-grouping-post-json';
import { ApiDocumentsGroupingPost$Json$Params } from '../fn/document-grouping/api-documents-grouping-post-json';
import { apiDocumentsGroupingPost$Plain } from '../fn/document-grouping/api-documents-grouping-post-plain';
import { ApiDocumentsGroupingPost$Plain$Params } from '../fn/document-grouping/api-documents-grouping-post-plain';
import { DocumentGroupingNode } from '../models/document-grouping-node';

@Injectable({ providedIn: 'root' })
export class DocumentGroupingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDocumentsGroupingPost()` */
  static readonly ApiDocumentsGroupingPostPath = '/api/documents/grouping';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsGroupingPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsGroupingPost$Plain$Response(params?: ApiDocumentsGroupingPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DocumentGroupingNode>>> {
    return apiDocumentsGroupingPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsGroupingPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsGroupingPost$Plain(params?: ApiDocumentsGroupingPost$Plain$Params, context?: HttpContext): Observable<Array<DocumentGroupingNode>> {
    return this.apiDocumentsGroupingPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DocumentGroupingNode>>): Array<DocumentGroupingNode> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsGroupingPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsGroupingPost$Json$Response(params?: ApiDocumentsGroupingPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DocumentGroupingNode>>> {
    return apiDocumentsGroupingPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsGroupingPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsGroupingPost$Json(params?: ApiDocumentsGroupingPost$Json$Params, context?: HttpContext): Observable<Array<DocumentGroupingNode>> {
    return this.apiDocumentsGroupingPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DocumentGroupingNode>>): Array<DocumentGroupingNode> => r.body)
    );
  }

}

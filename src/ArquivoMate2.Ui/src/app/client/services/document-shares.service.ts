/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDocumentsDocumentIdSharesGet$Json } from '../fn/document-shares/api-documents-document-id-shares-get-json';
import { ApiDocumentsDocumentIdSharesGet$Json$Params } from '../fn/document-shares/api-documents-document-id-shares-get-json';
import { apiDocumentsDocumentIdSharesGet$Plain } from '../fn/document-shares/api-documents-document-id-shares-get-plain';
import { ApiDocumentsDocumentIdSharesGet$Plain$Params } from '../fn/document-shares/api-documents-document-id-shares-get-plain';
import { apiDocumentsDocumentIdSharesPost$Json } from '../fn/document-shares/api-documents-document-id-shares-post-json';
import { ApiDocumentsDocumentIdSharesPost$Json$Params } from '../fn/document-shares/api-documents-document-id-shares-post-json';
import { apiDocumentsDocumentIdSharesPost$Plain } from '../fn/document-shares/api-documents-document-id-shares-post-plain';
import { ApiDocumentsDocumentIdSharesPost$Plain$Params } from '../fn/document-shares/api-documents-document-id-shares-post-plain';
import { apiDocumentsDocumentIdSharesShareIdDelete } from '../fn/document-shares/api-documents-document-id-shares-share-id-delete';
import { ApiDocumentsDocumentIdSharesShareIdDelete$Params } from '../fn/document-shares/api-documents-document-id-shares-share-id-delete';
import { DocumentShareDto } from '../models/document-share-dto';

@Injectable({ providedIn: 'root' })
export class DocumentSharesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDocumentsDocumentIdSharesGet()` */
  static readonly ApiDocumentsDocumentIdSharesGetPath = '/api/documents/{documentId}/shares';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsDocumentIdSharesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsDocumentIdSharesGet$Plain$Response(params: ApiDocumentsDocumentIdSharesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DocumentShareDto>>> {
    return apiDocumentsDocumentIdSharesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsDocumentIdSharesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsDocumentIdSharesGet$Plain(params: ApiDocumentsDocumentIdSharesGet$Plain$Params, context?: HttpContext): Observable<Array<DocumentShareDto>> {
    return this.apiDocumentsDocumentIdSharesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DocumentShareDto>>): Array<DocumentShareDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsDocumentIdSharesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsDocumentIdSharesGet$Json$Response(params: ApiDocumentsDocumentIdSharesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DocumentShareDto>>> {
    return apiDocumentsDocumentIdSharesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsDocumentIdSharesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsDocumentIdSharesGet$Json(params: ApiDocumentsDocumentIdSharesGet$Json$Params, context?: HttpContext): Observable<Array<DocumentShareDto>> {
    return this.apiDocumentsDocumentIdSharesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DocumentShareDto>>): Array<DocumentShareDto> => r.body)
    );
  }

  /** Path part for operation `apiDocumentsDocumentIdSharesPost()` */
  static readonly ApiDocumentsDocumentIdSharesPostPath = '/api/documents/{documentId}/shares';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsDocumentIdSharesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsDocumentIdSharesPost$Plain$Response(params: ApiDocumentsDocumentIdSharesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentShareDto>> {
    return apiDocumentsDocumentIdSharesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsDocumentIdSharesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsDocumentIdSharesPost$Plain(params: ApiDocumentsDocumentIdSharesPost$Plain$Params, context?: HttpContext): Observable<DocumentShareDto> {
    return this.apiDocumentsDocumentIdSharesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentShareDto>): DocumentShareDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsDocumentIdSharesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsDocumentIdSharesPost$Json$Response(params: ApiDocumentsDocumentIdSharesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentShareDto>> {
    return apiDocumentsDocumentIdSharesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsDocumentIdSharesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsDocumentIdSharesPost$Json(params: ApiDocumentsDocumentIdSharesPost$Json$Params, context?: HttpContext): Observable<DocumentShareDto> {
    return this.apiDocumentsDocumentIdSharesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentShareDto>): DocumentShareDto => r.body)
    );
  }

  /** Path part for operation `apiDocumentsDocumentIdSharesShareIdDelete()` */
  static readonly ApiDocumentsDocumentIdSharesShareIdDeletePath = '/api/documents/{documentId}/shares/{shareId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsDocumentIdSharesShareIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsDocumentIdSharesShareIdDelete$Response(params: ApiDocumentsDocumentIdSharesShareIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDocumentsDocumentIdSharesShareIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsDocumentIdSharesShareIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsDocumentIdSharesShareIdDelete(params: ApiDocumentsDocumentIdSharesShareIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiDocumentsDocumentIdSharesShareIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

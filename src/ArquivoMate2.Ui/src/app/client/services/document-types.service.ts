/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDocumentTypesGet$Json } from '../fn/document-types/api-document-types-get-json';
import { ApiDocumentTypesGet$Json$Params } from '../fn/document-types/api-document-types-get-json';
import { apiDocumentTypesGet$Plain } from '../fn/document-types/api-document-types-get-plain';
import { ApiDocumentTypesGet$Plain$Params } from '../fn/document-types/api-document-types-get-plain';
import { apiDocumentTypesIdDelete } from '../fn/document-types/api-document-types-id-delete';
import { ApiDocumentTypesIdDelete$Params } from '../fn/document-types/api-document-types-id-delete';
import { apiDocumentTypesIdPut$Json } from '../fn/document-types/api-document-types-id-put-json';
import { ApiDocumentTypesIdPut$Json$Params } from '../fn/document-types/api-document-types-id-put-json';
import { apiDocumentTypesIdPut$Plain } from '../fn/document-types/api-document-types-id-put-plain';
import { ApiDocumentTypesIdPut$Plain$Params } from '../fn/document-types/api-document-types-id-put-plain';
import { apiDocumentTypesPost$Json } from '../fn/document-types/api-document-types-post-json';
import { ApiDocumentTypesPost$Json$Params } from '../fn/document-types/api-document-types-post-json';
import { apiDocumentTypesPost$Plain } from '../fn/document-types/api-document-types-post-plain';
import { ApiDocumentTypesPost$Plain$Params } from '../fn/document-types/api-document-types-post-plain';
import { DocumentTypeDtoApiResponse } from '../models/document-type-dto-api-response';
import { DocumentTypeDtoListApiResponse } from '../models/document-type-dto-list-api-response';

@Injectable({ providedIn: 'root' })
export class DocumentTypesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDocumentTypesGet()` */
  static readonly ApiDocumentTypesGetPath = '/api/document-types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentTypesGet$Plain$Response(params?: ApiDocumentTypesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentTypeDtoListApiResponse>> {
    return apiDocumentTypesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentTypesGet$Plain(params?: ApiDocumentTypesGet$Plain$Params, context?: HttpContext): Observable<DocumentTypeDtoListApiResponse> {
    return this.apiDocumentTypesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentTypeDtoListApiResponse>): DocumentTypeDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentTypesGet$Json$Response(params?: ApiDocumentTypesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentTypeDtoListApiResponse>> {
    return apiDocumentTypesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentTypesGet$Json(params?: ApiDocumentTypesGet$Json$Params, context?: HttpContext): Observable<DocumentTypeDtoListApiResponse> {
    return this.apiDocumentTypesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentTypeDtoListApiResponse>): DocumentTypeDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `apiDocumentTypesPost()` */
  static readonly ApiDocumentTypesPostPath = '/api/document-types';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesPost$Plain$Response(params?: ApiDocumentTypesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentTypeDtoApiResponse>> {
    return apiDocumentTypesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesPost$Plain(params?: ApiDocumentTypesPost$Plain$Params, context?: HttpContext): Observable<DocumentTypeDtoApiResponse> {
    return this.apiDocumentTypesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentTypeDtoApiResponse>): DocumentTypeDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesPost$Json$Response(params?: ApiDocumentTypesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentTypeDtoApiResponse>> {
    return apiDocumentTypesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesPost$Json(params?: ApiDocumentTypesPost$Json$Params, context?: HttpContext): Observable<DocumentTypeDtoApiResponse> {
    return this.apiDocumentTypesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentTypeDtoApiResponse>): DocumentTypeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiDocumentTypesIdPut()` */
  static readonly ApiDocumentTypesIdPutPath = '/api/document-types/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesIdPut$Plain$Response(params: ApiDocumentTypesIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentTypeDtoApiResponse>> {
    return apiDocumentTypesIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesIdPut$Plain(params: ApiDocumentTypesIdPut$Plain$Params, context?: HttpContext): Observable<DocumentTypeDtoApiResponse> {
    return this.apiDocumentTypesIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentTypeDtoApiResponse>): DocumentTypeDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesIdPut$Json$Response(params: ApiDocumentTypesIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentTypeDtoApiResponse>> {
    return apiDocumentTypesIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentTypesIdPut$Json(params: ApiDocumentTypesIdPut$Json$Params, context?: HttpContext): Observable<DocumentTypeDtoApiResponse> {
    return this.apiDocumentTypesIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentTypeDtoApiResponse>): DocumentTypeDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiDocumentTypesIdDelete()` */
  static readonly ApiDocumentTypesIdDeletePath = '/api/document-types/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentTypesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentTypesIdDelete$Response(params: ApiDocumentTypesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDocumentTypesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentTypesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentTypesIdDelete(params: ApiDocumentTypesIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiDocumentTypesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

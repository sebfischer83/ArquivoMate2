/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiDocumentsGet$Json } from '../fn/documents/api-documents-get-json';
import { ApiDocumentsGet$Json$Params } from '../fn/documents/api-documents-get-json';
import { apiDocumentsGet$Plain } from '../fn/documents/api-documents-get-plain';
import { ApiDocumentsGet$Plain$Params } from '../fn/documents/api-documents-get-plain';
import { apiDocumentsIdGet$Json } from '../fn/documents/api-documents-id-get-json';
import { ApiDocumentsIdGet$Json$Params } from '../fn/documents/api-documents-id-get-json';
import { apiDocumentsIdGet$Plain } from '../fn/documents/api-documents-id-get-plain';
import { ApiDocumentsIdGet$Plain$Params } from '../fn/documents/api-documents-id-get-plain';
import { apiDocumentsIdUpdateFieldsPatch$Json } from '../fn/documents/api-documents-id-update-fields-patch-json';
import { ApiDocumentsIdUpdateFieldsPatch$Json$Params } from '../fn/documents/api-documents-id-update-fields-patch-json';
import { apiDocumentsIdUpdateFieldsPatch$Plain } from '../fn/documents/api-documents-id-update-fields-patch-plain';
import { ApiDocumentsIdUpdateFieldsPatch$Plain$Params } from '../fn/documents/api-documents-id-update-fields-patch-plain';
import { apiDocumentsPost } from '../fn/documents/api-documents-post';
import { ApiDocumentsPost$Params } from '../fn/documents/api-documents-post';
import { apiDocumentsSharePost$Json } from '../fn/documents/api-documents-share-post-json';
import { ApiDocumentsSharePost$Json$Params } from '../fn/documents/api-documents-share-post-json';
import { apiDocumentsSharePost$Plain } from '../fn/documents/api-documents-share-post-plain';
import { ApiDocumentsSharePost$Plain$Params } from '../fn/documents/api-documents-share-post-plain';
import { apiDocumentsStatsGet$Json } from '../fn/documents/api-documents-stats-get-json';
import { ApiDocumentsStatsGet$Json$Params } from '../fn/documents/api-documents-stats-get-json';
import { apiDocumentsStatsGet$Plain } from '../fn/documents/api-documents-stats-get-plain';
import { ApiDocumentsStatsGet$Plain$Params } from '../fn/documents/api-documents-stats-get-plain';
import { DocumentDto } from '../models/document-dto';
import { DocumentListDto } from '../models/document-list-dto';
import { DocumentStatsDto } from '../models/document-stats-dto';
import { ShareCreatedDto } from '../models/share-created-dto';

@Injectable({ providedIn: 'root' })
export class DocumentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiDocumentsGet()` */
  static readonly ApiDocumentsGetPath = '/api/documents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsGet$Plain$Response(params?: ApiDocumentsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentListDto>> {
    return apiDocumentsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsGet$Plain(params?: ApiDocumentsGet$Plain$Params, context?: HttpContext): Observable<DocumentListDto> {
    return this.apiDocumentsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentListDto>): DocumentListDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsGet$Json$Response(params?: ApiDocumentsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentListDto>> {
    return apiDocumentsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsGet$Json(params?: ApiDocumentsGet$Json$Params, context?: HttpContext): Observable<DocumentListDto> {
    return this.apiDocumentsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentListDto>): DocumentListDto => r.body)
    );
  }

  /** Path part for operation `apiDocumentsPost()` */
  static readonly ApiDocumentsPostPath = '/api/documents';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsPost()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  apiDocumentsPost$Response(params: ApiDocumentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiDocumentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsPost$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  apiDocumentsPost(params: ApiDocumentsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiDocumentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiDocumentsIdUpdateFieldsPatch()` */
  static readonly ApiDocumentsIdUpdateFieldsPatchPath = '/api/documents/{id}/update-fields';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsIdUpdateFieldsPatch$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsIdUpdateFieldsPatch$Plain$Response(params: ApiDocumentsIdUpdateFieldsPatch$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentDto>> {
    return apiDocumentsIdUpdateFieldsPatch$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsIdUpdateFieldsPatch$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsIdUpdateFieldsPatch$Plain(params: ApiDocumentsIdUpdateFieldsPatch$Plain$Params, context?: HttpContext): Observable<DocumentDto> {
    return this.apiDocumentsIdUpdateFieldsPatch$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentDto>): DocumentDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsIdUpdateFieldsPatch$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsIdUpdateFieldsPatch$Json$Response(params: ApiDocumentsIdUpdateFieldsPatch$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentDto>> {
    return apiDocumentsIdUpdateFieldsPatch$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsIdUpdateFieldsPatch$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsIdUpdateFieldsPatch$Json(params: ApiDocumentsIdUpdateFieldsPatch$Json$Params, context?: HttpContext): Observable<DocumentDto> {
    return this.apiDocumentsIdUpdateFieldsPatch$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentDto>): DocumentDto => r.body)
    );
  }

  /** Path part for operation `apiDocumentsStatsGet()` */
  static readonly ApiDocumentsStatsGetPath = '/api/documents/stats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsStatsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsStatsGet$Plain$Response(params?: ApiDocumentsStatsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentStatsDto>> {
    return apiDocumentsStatsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsStatsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsStatsGet$Plain(params?: ApiDocumentsStatsGet$Plain$Params, context?: HttpContext): Observable<DocumentStatsDto> {
    return this.apiDocumentsStatsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentStatsDto>): DocumentStatsDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsStatsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsStatsGet$Json$Response(params?: ApiDocumentsStatsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentStatsDto>> {
    return apiDocumentsStatsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsStatsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsStatsGet$Json(params?: ApiDocumentsStatsGet$Json$Params, context?: HttpContext): Observable<DocumentStatsDto> {
    return this.apiDocumentsStatsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentStatsDto>): DocumentStatsDto => r.body)
    );
  }

  /** Path part for operation `apiDocumentsIdGet()` */
  static readonly ApiDocumentsIdGetPath = '/api/documents/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsIdGet$Plain$Response(params: ApiDocumentsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentDto>> {
    return apiDocumentsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsIdGet$Plain(params: ApiDocumentsIdGet$Plain$Params, context?: HttpContext): Observable<DocumentDto> {
    return this.apiDocumentsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentDto>): DocumentDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsIdGet$Json$Response(params: ApiDocumentsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<DocumentDto>> {
    return apiDocumentsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiDocumentsIdGet$Json(params: ApiDocumentsIdGet$Json$Params, context?: HttpContext): Observable<DocumentDto> {
    return this.apiDocumentsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<DocumentDto>): DocumentDto => r.body)
    );
  }

  /** Path part for operation `apiDocumentsSharePost()` */
  static readonly ApiDocumentsSharePostPath = '/api/documents/share';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsSharePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsSharePost$Plain$Response(params: ApiDocumentsSharePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareCreatedDto>> {
    return apiDocumentsSharePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsSharePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsSharePost$Plain(params: ApiDocumentsSharePost$Plain$Params, context?: HttpContext): Observable<ShareCreatedDto> {
    return this.apiDocumentsSharePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareCreatedDto>): ShareCreatedDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiDocumentsSharePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsSharePost$Json$Response(params: ApiDocumentsSharePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareCreatedDto>> {
    return apiDocumentsSharePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiDocumentsSharePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiDocumentsSharePost$Json(params: ApiDocumentsSharePost$Json$Params, context?: HttpContext): Observable<ShareCreatedDto> {
    return this.apiDocumentsSharePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareCreatedDto>): ShareCreatedDto => r.body)
    );
  }

}

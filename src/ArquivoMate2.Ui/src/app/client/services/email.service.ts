/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiEmailCountGet$Json } from '../fn/email/api-email-count-get-json';
import { ApiEmailCountGet$Json$Params } from '../fn/email/api-email-count-get-json';
import { apiEmailCountGet$Plain } from '../fn/email/api-email-count-get-plain';
import { ApiEmailCountGet$Plain$Params } from '../fn/email/api-email-count-get-plain';
import { apiEmailCriteriaDelete } from '../fn/email/api-email-criteria-delete';
import { ApiEmailCriteriaDelete$Params } from '../fn/email/api-email-criteria-delete';
import { apiEmailCriteriaGet$Json } from '../fn/email/api-email-criteria-get-json';
import { ApiEmailCriteriaGet$Json$Params } from '../fn/email/api-email-criteria-get-json';
import { apiEmailCriteriaGet$Plain } from '../fn/email/api-email-criteria-get-plain';
import { ApiEmailCriteriaGet$Plain$Params } from '../fn/email/api-email-criteria-get-plain';
import { apiEmailCriteriaPost$Json } from '../fn/email/api-email-criteria-post-json';
import { ApiEmailCriteriaPost$Json$Params } from '../fn/email/api-email-criteria-post-json';
import { apiEmailCriteriaPost$Plain } from '../fn/email/api-email-criteria-post-plain';
import { ApiEmailCriteriaPost$Plain$Params } from '../fn/email/api-email-criteria-post-plain';
import { apiEmailSettingsDelete } from '../fn/email/api-email-settings-delete';
import { ApiEmailSettingsDelete$Params } from '../fn/email/api-email-settings-delete';
import { apiEmailSettingsGet$Json } from '../fn/email/api-email-settings-get-json';
import { ApiEmailSettingsGet$Json$Params } from '../fn/email/api-email-settings-get-json';
import { apiEmailSettingsGet$Plain } from '../fn/email/api-email-settings-get-plain';
import { ApiEmailSettingsGet$Plain$Params } from '../fn/email/api-email-settings-get-plain';
import { apiEmailSettingsPost } from '../fn/email/api-email-settings-post';
import { ApiEmailSettingsPost$Params } from '../fn/email/api-email-settings-post';
import { apiEmailTestConnectionPost$Json } from '../fn/email/api-email-test-connection-post-json';
import { ApiEmailTestConnectionPost$Json$Params } from '../fn/email/api-email-test-connection-post-json';
import { apiEmailTestConnectionPost$Plain } from '../fn/email/api-email-test-connection-post-plain';
import { ApiEmailTestConnectionPost$Plain$Params } from '../fn/email/api-email-test-connection-post-plain';
import { EmailCriteriaDto } from '../models/email-criteria-dto';
import { EmailSettings } from '../models/email-settings';

@Injectable({ providedIn: 'root' })
export class EmailService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiEmailCountGet()` */
  static readonly ApiEmailCountGetPath = '/api/Email/count';

  /**
   * Gets the total count of emails in the mailbox.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCountGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCountGet$Plain$Response(params?: ApiEmailCountGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiEmailCountGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the total count of emails in the mailbox.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCountGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCountGet$Plain(params?: ApiEmailCountGet$Plain$Params, context?: HttpContext): Observable<number> {
    return this.apiEmailCountGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /**
   * Gets the total count of emails in the mailbox.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCountGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCountGet$Json$Response(params?: ApiEmailCountGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiEmailCountGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the total count of emails in the mailbox.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCountGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCountGet$Json(params?: ApiEmailCountGet$Json$Params, context?: HttpContext): Observable<number> {
    return this.apiEmailCountGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `apiEmailTestConnectionPost()` */
  static readonly ApiEmailTestConnectionPostPath = '/api/Email/test-connection';

  /**
   * Tests the email connection with current settings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailTestConnectionPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailTestConnectionPost$Plain$Response(params?: ApiEmailTestConnectionPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiEmailTestConnectionPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Tests the email connection with current settings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailTestConnectionPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailTestConnectionPost$Plain(params?: ApiEmailTestConnectionPost$Plain$Params, context?: HttpContext): Observable<boolean> {
    return this.apiEmailTestConnectionPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /**
   * Tests the email connection with current settings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailTestConnectionPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailTestConnectionPost$Json$Response(params?: ApiEmailTestConnectionPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiEmailTestConnectionPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Tests the email connection with current settings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailTestConnectionPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailTestConnectionPost$Json(params?: ApiEmailTestConnectionPost$Json$Params, context?: HttpContext): Observable<boolean> {
    return this.apiEmailTestConnectionPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `apiEmailSettingsGet()` */
  static readonly ApiEmailSettingsGetPath = '/api/Email/settings';

  /**
   * Gets the current user's email settings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailSettingsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailSettingsGet$Plain$Response(params?: ApiEmailSettingsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSettings>> {
    return apiEmailSettingsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the current user's email settings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailSettingsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailSettingsGet$Plain(params?: ApiEmailSettingsGet$Plain$Params, context?: HttpContext): Observable<EmailSettings> {
    return this.apiEmailSettingsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSettings>): EmailSettings => r.body)
    );
  }

  /**
   * Gets the current user's email settings.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailSettingsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailSettingsGet$Json$Response(params?: ApiEmailSettingsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailSettings>> {
    return apiEmailSettingsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the current user's email settings.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailSettingsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailSettingsGet$Json(params?: ApiEmailSettingsGet$Json$Params, context?: HttpContext): Observable<EmailSettings> {
    return this.apiEmailSettingsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailSettings>): EmailSettings => r.body)
    );
  }

  /** Path part for operation `apiEmailSettingsPost()` */
  static readonly ApiEmailSettingsPostPath = '/api/Email/settings';

  /**
   * Saves or updates email settings for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailSettingsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmailSettingsPost$Response(params?: ApiEmailSettingsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmailSettingsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Saves or updates email settings for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailSettingsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmailSettingsPost(params?: ApiEmailSettingsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiEmailSettingsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmailSettingsDelete()` */
  static readonly ApiEmailSettingsDeletePath = '/api/Email/settings';

  /**
   * Deletes email settings for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailSettingsDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailSettingsDelete$Response(params?: ApiEmailSettingsDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmailSettingsDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes email settings for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailSettingsDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailSettingsDelete(params?: ApiEmailSettingsDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiEmailSettingsDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEmailCriteriaGet()` */
  static readonly ApiEmailCriteriaGetPath = '/api/Email/criteria';

  /**
   * Gets the email criteria for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCriteriaGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCriteriaGet$Plain$Response(params?: ApiEmailCriteriaGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailCriteriaDto>> {
    return apiEmailCriteriaGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the email criteria for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCriteriaGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCriteriaGet$Plain(params?: ApiEmailCriteriaGet$Plain$Params, context?: HttpContext): Observable<EmailCriteriaDto> {
    return this.apiEmailCriteriaGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailCriteriaDto>): EmailCriteriaDto => r.body)
    );
  }

  /**
   * Gets the email criteria for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCriteriaGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCriteriaGet$Json$Response(params?: ApiEmailCriteriaGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailCriteriaDto>> {
    return apiEmailCriteriaGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Gets the email criteria for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCriteriaGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCriteriaGet$Json(params?: ApiEmailCriteriaGet$Json$Params, context?: HttpContext): Observable<EmailCriteriaDto> {
    return this.apiEmailCriteriaGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailCriteriaDto>): EmailCriteriaDto => r.body)
    );
  }

  /** Path part for operation `apiEmailCriteriaPost()` */
  static readonly ApiEmailCriteriaPostPath = '/api/Email/criteria';

  /**
   * Saves (creates or updates) email criteria for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCriteriaPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmailCriteriaPost$Plain$Response(params?: ApiEmailCriteriaPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailCriteriaDto>> {
    return apiEmailCriteriaPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Saves (creates or updates) email criteria for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCriteriaPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmailCriteriaPost$Plain(params?: ApiEmailCriteriaPost$Plain$Params, context?: HttpContext): Observable<EmailCriteriaDto> {
    return this.apiEmailCriteriaPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailCriteriaDto>): EmailCriteriaDto => r.body)
    );
  }

  /**
   * Saves (creates or updates) email criteria for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCriteriaPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmailCriteriaPost$Json$Response(params?: ApiEmailCriteriaPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<EmailCriteriaDto>> {
    return apiEmailCriteriaPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Saves (creates or updates) email criteria for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCriteriaPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEmailCriteriaPost$Json(params?: ApiEmailCriteriaPost$Json$Params, context?: HttpContext): Observable<EmailCriteriaDto> {
    return this.apiEmailCriteriaPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmailCriteriaDto>): EmailCriteriaDto => r.body)
    );
  }

  /** Path part for operation `apiEmailCriteriaDelete()` */
  static readonly ApiEmailCriteriaDeletePath = '/api/Email/criteria';

  /**
   * Deletes email criteria for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEmailCriteriaDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCriteriaDelete$Response(params?: ApiEmailCriteriaDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEmailCriteriaDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes email criteria for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEmailCriteriaDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEmailCriteriaDelete(params?: ApiEmailCriteriaDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiEmailCriteriaDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiHistoryCompletedCountGet$Json } from '../fn/import-history/api-history-completed-count-get-json';
import { ApiHistoryCompletedCountGet$Json$Params } from '../fn/import-history/api-history-completed-count-get-json';
import { apiHistoryCompletedCountGet$Plain } from '../fn/import-history/api-history-completed-count-get-plain';
import { ApiHistoryCompletedCountGet$Plain$Params } from '../fn/import-history/api-history-completed-count-get-plain';
import { apiHistoryCompletedGet$Json } from '../fn/import-history/api-history-completed-get-json';
import { ApiHistoryCompletedGet$Json$Params } from '../fn/import-history/api-history-completed-get-json';
import { apiHistoryCompletedGet$Plain } from '../fn/import-history/api-history-completed-get-plain';
import { ApiHistoryCompletedGet$Plain$Params } from '../fn/import-history/api-history-completed-get-plain';
import { apiHistoryFailedCountGet$Json } from '../fn/import-history/api-history-failed-count-get-json';
import { ApiHistoryFailedCountGet$Json$Params } from '../fn/import-history/api-history-failed-count-get-json';
import { apiHistoryFailedCountGet$Plain } from '../fn/import-history/api-history-failed-count-get-plain';
import { ApiHistoryFailedCountGet$Plain$Params } from '../fn/import-history/api-history-failed-count-get-plain';
import { apiHistoryFailedGet$Json } from '../fn/import-history/api-history-failed-get-json';
import { ApiHistoryFailedGet$Json$Params } from '../fn/import-history/api-history-failed-get-json';
import { apiHistoryFailedGet$Plain } from '../fn/import-history/api-history-failed-get-plain';
import { ApiHistoryFailedGet$Plain$Params } from '../fn/import-history/api-history-failed-get-plain';
import { apiHistoryGet$Json } from '../fn/import-history/api-history-get-json';
import { ApiHistoryGet$Json$Params } from '../fn/import-history/api-history-get-json';
import { apiHistoryGet$Plain } from '../fn/import-history/api-history-get-plain';
import { ApiHistoryGet$Plain$Params } from '../fn/import-history/api-history-get-plain';
import { apiHistoryHideByStatusPost } from '../fn/import-history/api-history-hide-by-status-post';
import { ApiHistoryHideByStatusPost$Params } from '../fn/import-history/api-history-hide-by-status-post';
import { apiHistoryInprogressCountGet$Json } from '../fn/import-history/api-history-inprogress-count-get-json';
import { ApiHistoryInprogressCountGet$Json$Params } from '../fn/import-history/api-history-inprogress-count-get-json';
import { apiHistoryInprogressCountGet$Plain } from '../fn/import-history/api-history-inprogress-count-get-plain';
import { ApiHistoryInprogressCountGet$Plain$Params } from '../fn/import-history/api-history-inprogress-count-get-plain';
import { apiHistoryInprogressGet$Json } from '../fn/import-history/api-history-inprogress-get-json';
import { ApiHistoryInprogressGet$Json$Params } from '../fn/import-history/api-history-inprogress-get-json';
import { apiHistoryInprogressGet$Plain } from '../fn/import-history/api-history-inprogress-get-plain';
import { ApiHistoryInprogressGet$Plain$Params } from '../fn/import-history/api-history-inprogress-get-plain';
import { apiHistoryPendingCountGet$Json } from '../fn/import-history/api-history-pending-count-get-json';
import { ApiHistoryPendingCountGet$Json$Params } from '../fn/import-history/api-history-pending-count-get-json';
import { apiHistoryPendingCountGet$Plain } from '../fn/import-history/api-history-pending-count-get-plain';
import { ApiHistoryPendingCountGet$Plain$Params } from '../fn/import-history/api-history-pending-count-get-plain';
import { apiHistoryPendingGet$Json } from '../fn/import-history/api-history-pending-get-json';
import { ApiHistoryPendingGet$Json$Params } from '../fn/import-history/api-history-pending-get-json';
import { apiHistoryPendingGet$Plain } from '../fn/import-history/api-history-pending-get-plain';
import { ApiHistoryPendingGet$Plain$Params } from '../fn/import-history/api-history-pending-get-plain';
import { ImportHistoryListDtoApiResponse } from '../models/import-history-list-dto-api-response';
import { Int32ApiResponse } from '../models/int-32-api-response';

@Injectable({ providedIn: 'root' })
export class ImportHistoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiHistoryHideByStatusPost()` */
  static readonly ApiHistoryHideByStatusPostPath = '/api/history/hideByStatus';

  /**
   * Hides every import history entry that matches the supplied processing status for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryHideByStatusPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryHideByStatusPost$Response(params?: ApiHistoryHideByStatusPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiHistoryHideByStatusPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Hides every import history entry that matches the supplied processing status for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryHideByStatusPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryHideByStatusPost(params?: ApiHistoryHideByStatusPost$Params, context?: HttpContext): Observable<void> {
    return this.apiHistoryHideByStatusPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiHistoryGet()` */
  static readonly ApiHistoryGetPath = '/api/history';

  /**
   * Retrieves a paged list of import history entries for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryGet$Plain$Response(params?: ApiHistoryGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a paged list of import history entries for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryGet$Plain(params?: ApiHistoryGet$Plain$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /**
   * Retrieves a paged list of import history entries for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryGet$Json$Response(params?: ApiHistoryGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a paged list of import history entries for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryGet$Json(params?: ApiHistoryGet$Json$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryInprogressCountGet()` */
  static readonly ApiHistoryInprogressCountGetPath = '/api/history/inprogress/count';

  /**
   * Counts all imports that are currently being processed for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryInprogressCountGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressCountGet$Plain$Response(params?: ApiHistoryInprogressCountGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryInprogressCountGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts all imports that are currently being processed for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryInprogressCountGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressCountGet$Plain(params?: ApiHistoryInprogressCountGet$Plain$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryInprogressCountGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /**
   * Counts all imports that are currently being processed for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryInprogressCountGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressCountGet$Json$Response(params?: ApiHistoryInprogressCountGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryInprogressCountGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts all imports that are currently being processed for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryInprogressCountGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressCountGet$Json(params?: ApiHistoryInprogressCountGet$Json$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryInprogressCountGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryInprogressGet()` */
  static readonly ApiHistoryInprogressGetPath = '/api/history/inprogress';

  /**
   * Lists imports that are currently in progress for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryInprogressGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressGet$Plain$Response(params?: ApiHistoryInprogressGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryInprogressGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists imports that are currently in progress for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryInprogressGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressGet$Plain(params?: ApiHistoryInprogressGet$Plain$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryInprogressGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /**
   * Lists imports that are currently in progress for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryInprogressGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressGet$Json$Response(params?: ApiHistoryInprogressGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryInprogressGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists imports that are currently in progress for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryInprogressGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryInprogressGet$Json(params?: ApiHistoryInprogressGet$Json$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryInprogressGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryPendingCountGet()` */
  static readonly ApiHistoryPendingCountGetPath = '/api/history/pending/count';

  /**
   * Counts pending imports that are queued for processing.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryPendingCountGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingCountGet$Plain$Response(params?: ApiHistoryPendingCountGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryPendingCountGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts pending imports that are queued for processing.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryPendingCountGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingCountGet$Plain(params?: ApiHistoryPendingCountGet$Plain$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryPendingCountGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /**
   * Counts pending imports that are queued for processing.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryPendingCountGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingCountGet$Json$Response(params?: ApiHistoryPendingCountGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryPendingCountGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts pending imports that are queued for processing.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryPendingCountGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingCountGet$Json(params?: ApiHistoryPendingCountGet$Json$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryPendingCountGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryPendingGet()` */
  static readonly ApiHistoryPendingGetPath = '/api/history/pending';

  /**
   * Lists pending imports that are waiting to be processed.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryPendingGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingGet$Plain$Response(params?: ApiHistoryPendingGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryPendingGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists pending imports that are waiting to be processed.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryPendingGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingGet$Plain(params?: ApiHistoryPendingGet$Plain$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryPendingGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /**
   * Lists pending imports that are waiting to be processed.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryPendingGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingGet$Json$Response(params?: ApiHistoryPendingGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryPendingGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists pending imports that are waiting to be processed.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryPendingGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryPendingGet$Json(params?: ApiHistoryPendingGet$Json$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryPendingGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryCompletedCountGet()` */
  static readonly ApiHistoryCompletedCountGetPath = '/api/history/completed/count';

  /**
   * Counts completed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryCompletedCountGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedCountGet$Plain$Response(params?: ApiHistoryCompletedCountGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryCompletedCountGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts completed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryCompletedCountGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedCountGet$Plain(params?: ApiHistoryCompletedCountGet$Plain$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryCompletedCountGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /**
   * Counts completed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryCompletedCountGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedCountGet$Json$Response(params?: ApiHistoryCompletedCountGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryCompletedCountGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts completed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryCompletedCountGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedCountGet$Json(params?: ApiHistoryCompletedCountGet$Json$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryCompletedCountGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryCompletedGet()` */
  static readonly ApiHistoryCompletedGetPath = '/api/history/completed';

  /**
   * Lists completed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryCompletedGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedGet$Plain$Response(params?: ApiHistoryCompletedGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryCompletedGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists completed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryCompletedGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedGet$Plain(params?: ApiHistoryCompletedGet$Plain$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryCompletedGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /**
   * Lists completed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryCompletedGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedGet$Json$Response(params?: ApiHistoryCompletedGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryCompletedGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists completed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryCompletedGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryCompletedGet$Json(params?: ApiHistoryCompletedGet$Json$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryCompletedGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryFailedCountGet()` */
  static readonly ApiHistoryFailedCountGetPath = '/api/history/failed/count';

  /**
   * Counts failed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryFailedCountGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedCountGet$Plain$Response(params?: ApiHistoryFailedCountGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryFailedCountGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts failed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryFailedCountGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedCountGet$Plain(params?: ApiHistoryFailedCountGet$Plain$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryFailedCountGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /**
   * Counts failed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryFailedCountGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedCountGet$Json$Response(params?: ApiHistoryFailedCountGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Int32ApiResponse>> {
    return apiHistoryFailedCountGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Counts failed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryFailedCountGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedCountGet$Json(params?: ApiHistoryFailedCountGet$Json$Params, context?: HttpContext): Observable<Int32ApiResponse> {
    return this.apiHistoryFailedCountGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Int32ApiResponse>): Int32ApiResponse => r.body)
    );
  }

  /** Path part for operation `apiHistoryFailedGet()` */
  static readonly ApiHistoryFailedGetPath = '/api/history/failed';

  /**
   * Lists failed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryFailedGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedGet$Plain$Response(params?: ApiHistoryFailedGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryFailedGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists failed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryFailedGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedGet$Plain(params?: ApiHistoryFailedGet$Plain$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryFailedGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

  /**
   * Lists failed imports for the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHistoryFailedGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedGet$Json$Response(params?: ApiHistoryFailedGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ImportHistoryListDtoApiResponse>> {
    return apiHistoryFailedGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists failed imports for the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHistoryFailedGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHistoryFailedGet$Json(params?: ApiHistoryFailedGet$Json$Params, context?: HttpContext): Observable<ImportHistoryListDtoApiResponse> {
    return this.apiHistoryFailedGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ImportHistoryListDtoApiResponse>): ImportHistoryListDtoApiResponse => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiIngestionFilesPost$Json } from '../fn/ingestion/api-ingestion-files-post-json';
import { ApiIngestionFilesPost$Json$Params } from '../fn/ingestion/api-ingestion-files-post-json';
import { apiIngestionFilesPost$Plain } from '../fn/ingestion/api-ingestion-files-post-plain';
import { ApiIngestionFilesPost$Plain$Params } from '../fn/ingestion/api-ingestion-files-post-plain';
import { StringApiResponse } from '../models/string-api-response';

@Injectable({ providedIn: 'root' })
export class IngestionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiIngestionFilesPost()` */
  static readonly ApiIngestionFilesPostPath = '/api/ingestion/files';

  /**
   * Allows API key authenticated clients to drop files into the ingestion directory.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIngestionFilesPost$Plain()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiIngestionFilesPost$Plain$Response(params?: ApiIngestionFilesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StringApiResponse>> {
    return apiIngestionFilesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Allows API key authenticated clients to drop files into the ingestion directory.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIngestionFilesPost$Plain$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiIngestionFilesPost$Plain(params?: ApiIngestionFilesPost$Plain$Params, context?: HttpContext): Observable<StringApiResponse> {
    return this.apiIngestionFilesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringApiResponse>): StringApiResponse => r.body)
    );
  }

  /**
   * Allows API key authenticated clients to drop files into the ingestion directory.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiIngestionFilesPost$Json()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiIngestionFilesPost$Json$Response(params?: ApiIngestionFilesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<StringApiResponse>> {
    return apiIngestionFilesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Allows API key authenticated clients to drop files into the ingestion directory.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiIngestionFilesPost$Json$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  apiIngestionFilesPost$Json(params?: ApiIngestionFilesPost$Json$Params, context?: HttpContext): Observable<StringApiResponse> {
    return this.apiIngestionFilesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringApiResponse>): StringApiResponse => r.body)
    );
  }

}

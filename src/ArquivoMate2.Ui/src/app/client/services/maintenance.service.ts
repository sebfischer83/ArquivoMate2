/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiMaintenanceCacheKeyCountsGet } from '../fn/maintenance/api-maintenance-cache-key-counts-get';
import { ApiMaintenanceCacheKeyCountsGet$Params } from '../fn/maintenance/api-maintenance-cache-key-counts-get';
import { apiMaintenanceDocumentEncryptionKeysGet } from '../fn/maintenance/api-maintenance-document-encryption-keys-get';
import { ApiMaintenanceDocumentEncryptionKeysGet$Params } from '../fn/maintenance/api-maintenance-document-encryption-keys-get';
import { apiMaintenanceInfraStatsGet } from '../fn/maintenance/api-maintenance-infra-stats-get';
import { ApiMaintenanceInfraStatsGet$Params } from '../fn/maintenance/api-maintenance-infra-stats-get';

@Injectable({ providedIn: 'root' })
export class MaintenanceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiMaintenanceDocumentEncryptionKeysGet()` */
  static readonly ApiMaintenanceDocumentEncryptionKeysGetPath = '/api/maintenance/document-encryption-keys';

  /**
   * Creates a ZIP archive containing all DocumentEncryptionKeysAdded events for backup purposes.
   * Adds a metadata wrapper and a SHA256 hash file for integrity verification.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMaintenanceDocumentEncryptionKeysGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMaintenanceDocumentEncryptionKeysGet$Response(params?: ApiMaintenanceDocumentEncryptionKeysGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiMaintenanceDocumentEncryptionKeysGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a ZIP archive containing all DocumentEncryptionKeysAdded events for backup purposes.
   * Adds a metadata wrapper and a SHA256 hash file for integrity verification.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMaintenanceDocumentEncryptionKeysGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMaintenanceDocumentEncryptionKeysGet(params?: ApiMaintenanceDocumentEncryptionKeysGet$Params, context?: HttpContext): Observable<void> {
    return this.apiMaintenanceDocumentEncryptionKeysGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiMaintenanceCacheKeyCountsGet()` */
  static readonly ApiMaintenanceCacheKeyCountsGetPath = '/api/maintenance/cache/key-counts';

  /**
   * Returns a count of keys grouped by prefix (text before the first ':') across all configured Redis servers.
   * Intended for maintenance / monitoring use. This may be an expensive operation on large keyspaces.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMaintenanceCacheKeyCountsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMaintenanceCacheKeyCountsGet$Response(params?: ApiMaintenanceCacheKeyCountsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiMaintenanceCacheKeyCountsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Returns a count of keys grouped by prefix (text before the first ':') across all configured Redis servers.
   * Intended for maintenance / monitoring use. This may be an expensive operation on large keyspaces.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMaintenanceCacheKeyCountsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMaintenanceCacheKeyCountsGet(params?: ApiMaintenanceCacheKeyCountsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiMaintenanceCacheKeyCountsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiMaintenanceInfraStatsGet()` */
  static readonly ApiMaintenanceInfraStatsGetPath = '/api/maintenance/infra-stats';

  /**
   * Returns combined infra stats: Redis INFO, key counts per prefix and Meilisearch health + index stats.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiMaintenanceInfraStatsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMaintenanceInfraStatsGet$Response(params?: ApiMaintenanceInfraStatsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiMaintenanceInfraStatsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Returns combined infra stats: Redis INFO, key counts per prefix and Meilisearch health + index stats.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiMaintenanceInfraStatsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiMaintenanceInfraStatsGet(params?: ApiMaintenanceInfraStatsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiMaintenanceInfraStatsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiPartiesGet$Json } from '../fn/parties/api-parties-get-json';
import { ApiPartiesGet$Json$Params } from '../fn/parties/api-parties-get-json';
import { apiPartiesGet$Plain } from '../fn/parties/api-parties-get-plain';
import { ApiPartiesGet$Plain$Params } from '../fn/parties/api-parties-get-plain';
import { apiPartiesIdDelete } from '../fn/parties/api-parties-id-delete';
import { ApiPartiesIdDelete$Params } from '../fn/parties/api-parties-id-delete';
import { apiPartiesIdGet$Json } from '../fn/parties/api-parties-id-get-json';
import { ApiPartiesIdGet$Json$Params } from '../fn/parties/api-parties-id-get-json';
import { apiPartiesIdGet$Plain } from '../fn/parties/api-parties-id-get-plain';
import { ApiPartiesIdGet$Plain$Params } from '../fn/parties/api-parties-id-get-plain';
import { apiPartiesIdPut$Json } from '../fn/parties/api-parties-id-put-json';
import { ApiPartiesIdPut$Json$Params } from '../fn/parties/api-parties-id-put-json';
import { apiPartiesIdPut$Plain } from '../fn/parties/api-parties-id-put-plain';
import { ApiPartiesIdPut$Plain$Params } from '../fn/parties/api-parties-id-put-plain';
import { apiPartiesPost$Json } from '../fn/parties/api-parties-post-json';
import { ApiPartiesPost$Json$Params } from '../fn/parties/api-parties-post-json';
import { apiPartiesPost$Plain } from '../fn/parties/api-parties-post-plain';
import { ApiPartiesPost$Plain$Params } from '../fn/parties/api-parties-post-plain';
import { PartyDtoApiResponse } from '../models/party-dto-api-response';
import { PartyDtoIEnumerableApiResponse } from '../models/party-dto-i-enumerable-api-response';

@Injectable({ providedIn: 'root' })
export class PartiesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiPartiesGet()` */
  static readonly ApiPartiesGetPath = '/api/parties';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesGet$Plain$Response(params?: ApiPartiesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoIEnumerableApiResponse>> {
    return apiPartiesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesGet$Plain(params?: ApiPartiesGet$Plain$Params, context?: HttpContext): Observable<PartyDtoIEnumerableApiResponse> {
    return this.apiPartiesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoIEnumerableApiResponse>): PartyDtoIEnumerableApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesGet$Json$Response(params?: ApiPartiesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoIEnumerableApiResponse>> {
    return apiPartiesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesGet$Json(params?: ApiPartiesGet$Json$Params, context?: HttpContext): Observable<PartyDtoIEnumerableApiResponse> {
    return this.apiPartiesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoIEnumerableApiResponse>): PartyDtoIEnumerableApiResponse => r.body)
    );
  }

  /** Path part for operation `apiPartiesPost()` */
  static readonly ApiPartiesPostPath = '/api/parties';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesPost$Plain$Response(params?: ApiPartiesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoApiResponse>> {
    return apiPartiesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesPost$Plain(params?: ApiPartiesPost$Plain$Params, context?: HttpContext): Observable<PartyDtoApiResponse> {
    return this.apiPartiesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoApiResponse>): PartyDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesPost$Json$Response(params?: ApiPartiesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoApiResponse>> {
    return apiPartiesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesPost$Json(params?: ApiPartiesPost$Json$Params, context?: HttpContext): Observable<PartyDtoApiResponse> {
    return this.apiPartiesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoApiResponse>): PartyDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiPartiesIdGet()` */
  static readonly ApiPartiesIdGetPath = '/api/parties/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesIdGet$Plain$Response(params: ApiPartiesIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoApiResponse>> {
    return apiPartiesIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesIdGet$Plain(params: ApiPartiesIdGet$Plain$Params, context?: HttpContext): Observable<PartyDtoApiResponse> {
    return this.apiPartiesIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoApiResponse>): PartyDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesIdGet$Json$Response(params: ApiPartiesIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoApiResponse>> {
    return apiPartiesIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesIdGet$Json(params: ApiPartiesIdGet$Json$Params, context?: HttpContext): Observable<PartyDtoApiResponse> {
    return this.apiPartiesIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoApiResponse>): PartyDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiPartiesIdPut()` */
  static readonly ApiPartiesIdPutPath = '/api/parties/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesIdPut$Plain$Response(params: ApiPartiesIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoApiResponse>> {
    return apiPartiesIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesIdPut$Plain(params: ApiPartiesIdPut$Plain$Params, context?: HttpContext): Observable<PartyDtoApiResponse> {
    return this.apiPartiesIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoApiResponse>): PartyDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesIdPut$Json$Response(params: ApiPartiesIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<PartyDtoApiResponse>> {
    return apiPartiesIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiPartiesIdPut$Json(params: ApiPartiesIdPut$Json$Params, context?: HttpContext): Observable<PartyDtoApiResponse> {
    return this.apiPartiesIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<PartyDtoApiResponse>): PartyDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `apiPartiesIdDelete()` */
  static readonly ApiPartiesIdDeletePath = '/api/parties/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPartiesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesIdDelete$Response(params: ApiPartiesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiPartiesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPartiesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPartiesIdDelete(params: ApiPartiesIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiPartiesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

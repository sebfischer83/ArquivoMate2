/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiShareAutomationRulesGet$Json } from '../fn/share-automation-rules/api-share-automation-rules-get-json';
import { ApiShareAutomationRulesGet$Json$Params } from '../fn/share-automation-rules/api-share-automation-rules-get-json';
import { apiShareAutomationRulesGet$Plain } from '../fn/share-automation-rules/api-share-automation-rules-get-plain';
import { ApiShareAutomationRulesGet$Plain$Params } from '../fn/share-automation-rules/api-share-automation-rules-get-plain';
import { apiShareAutomationRulesPost$Json } from '../fn/share-automation-rules/api-share-automation-rules-post-json';
import { ApiShareAutomationRulesPost$Json$Params } from '../fn/share-automation-rules/api-share-automation-rules-post-json';
import { apiShareAutomationRulesPost$Plain } from '../fn/share-automation-rules/api-share-automation-rules-post-plain';
import { ApiShareAutomationRulesPost$Plain$Params } from '../fn/share-automation-rules/api-share-automation-rules-post-plain';
import { apiShareAutomationRulesRuleIdDelete } from '../fn/share-automation-rules/api-share-automation-rules-rule-id-delete';
import { ApiShareAutomationRulesRuleIdDelete$Params } from '../fn/share-automation-rules/api-share-automation-rules-rule-id-delete';
import { ShareAutomationRuleDto } from '../models/share-automation-rule-dto';

@Injectable({ providedIn: 'root' })
export class ShareAutomationRulesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiShareAutomationRulesGet()` */
  static readonly ApiShareAutomationRulesGetPath = '/api/share-automation-rules';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareAutomationRulesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareAutomationRulesGet$Plain$Response(params?: ApiShareAutomationRulesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShareAutomationRuleDto>>> {
    return apiShareAutomationRulesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareAutomationRulesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareAutomationRulesGet$Plain(params?: ApiShareAutomationRulesGet$Plain$Params, context?: HttpContext): Observable<Array<ShareAutomationRuleDto>> {
    return this.apiShareAutomationRulesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShareAutomationRuleDto>>): Array<ShareAutomationRuleDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareAutomationRulesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareAutomationRulesGet$Json$Response(params?: ApiShareAutomationRulesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShareAutomationRuleDto>>> {
    return apiShareAutomationRulesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareAutomationRulesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareAutomationRulesGet$Json(params?: ApiShareAutomationRulesGet$Json$Params, context?: HttpContext): Observable<Array<ShareAutomationRuleDto>> {
    return this.apiShareAutomationRulesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShareAutomationRuleDto>>): Array<ShareAutomationRuleDto> => r.body)
    );
  }

  /** Path part for operation `apiShareAutomationRulesPost()` */
  static readonly ApiShareAutomationRulesPostPath = '/api/share-automation-rules';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareAutomationRulesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareAutomationRulesPost$Plain$Response(params: ApiShareAutomationRulesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareAutomationRuleDto>> {
    return apiShareAutomationRulesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareAutomationRulesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareAutomationRulesPost$Plain(params: ApiShareAutomationRulesPost$Plain$Params, context?: HttpContext): Observable<ShareAutomationRuleDto> {
    return this.apiShareAutomationRulesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareAutomationRuleDto>): ShareAutomationRuleDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareAutomationRulesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareAutomationRulesPost$Json$Response(params: ApiShareAutomationRulesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareAutomationRuleDto>> {
    return apiShareAutomationRulesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareAutomationRulesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareAutomationRulesPost$Json(params: ApiShareAutomationRulesPost$Json$Params, context?: HttpContext): Observable<ShareAutomationRuleDto> {
    return this.apiShareAutomationRulesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareAutomationRuleDto>): ShareAutomationRuleDto => r.body)
    );
  }

  /** Path part for operation `apiShareAutomationRulesRuleIdDelete()` */
  static readonly ApiShareAutomationRulesRuleIdDeletePath = '/api/share-automation-rules/{ruleId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareAutomationRulesRuleIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareAutomationRulesRuleIdDelete$Response(params: ApiShareAutomationRulesRuleIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShareAutomationRulesRuleIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareAutomationRulesRuleIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareAutomationRulesRuleIdDelete(params: ApiShareAutomationRulesRuleIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiShareAutomationRulesRuleIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

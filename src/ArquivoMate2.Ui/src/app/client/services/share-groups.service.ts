/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiShareGroupsGet$Json } from '../fn/share-groups/api-share-groups-get-json';
import { ApiShareGroupsGet$Json$Params } from '../fn/share-groups/api-share-groups-get-json';
import { apiShareGroupsGet$Plain } from '../fn/share-groups/api-share-groups-get-plain';
import { ApiShareGroupsGet$Plain$Params } from '../fn/share-groups/api-share-groups-get-plain';
import { apiShareGroupsGroupIdDelete } from '../fn/share-groups/api-share-groups-group-id-delete';
import { ApiShareGroupsGroupIdDelete$Params } from '../fn/share-groups/api-share-groups-group-id-delete';
import { apiShareGroupsGroupIdGet$Json } from '../fn/share-groups/api-share-groups-group-id-get-json';
import { ApiShareGroupsGroupIdGet$Json$Params } from '../fn/share-groups/api-share-groups-group-id-get-json';
import { apiShareGroupsGroupIdGet$Plain } from '../fn/share-groups/api-share-groups-group-id-get-plain';
import { ApiShareGroupsGroupIdGet$Plain$Params } from '../fn/share-groups/api-share-groups-group-id-get-plain';
import { apiShareGroupsGroupIdPut$Json } from '../fn/share-groups/api-share-groups-group-id-put-json';
import { ApiShareGroupsGroupIdPut$Json$Params } from '../fn/share-groups/api-share-groups-group-id-put-json';
import { apiShareGroupsGroupIdPut$Plain } from '../fn/share-groups/api-share-groups-group-id-put-plain';
import { ApiShareGroupsGroupIdPut$Plain$Params } from '../fn/share-groups/api-share-groups-group-id-put-plain';
import { apiShareGroupsPost$Json } from '../fn/share-groups/api-share-groups-post-json';
import { ApiShareGroupsPost$Json$Params } from '../fn/share-groups/api-share-groups-post-json';
import { apiShareGroupsPost$Plain } from '../fn/share-groups/api-share-groups-post-plain';
import { ApiShareGroupsPost$Plain$Params } from '../fn/share-groups/api-share-groups-post-plain';
import { ShareGroupDto } from '../models/share-group-dto';

@Injectable({ providedIn: 'root' })
export class ShareGroupsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiShareGroupsGet()` */
  static readonly ApiShareGroupsGetPath = '/api/share-groups';

  /**
   * Lists all share groups owned by the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGet$Plain$Response(params?: ApiShareGroupsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShareGroupDto>>> {
    return apiShareGroupsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists all share groups owned by the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGet$Plain(params?: ApiShareGroupsGet$Plain$Params, context?: HttpContext): Observable<Array<ShareGroupDto>> {
    return this.apiShareGroupsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShareGroupDto>>): Array<ShareGroupDto> => r.body)
    );
  }

  /**
   * Lists all share groups owned by the current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGet$Json$Response(params?: ApiShareGroupsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShareGroupDto>>> {
    return apiShareGroupsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Lists all share groups owned by the current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGet$Json(params?: ApiShareGroupsGet$Json$Params, context?: HttpContext): Observable<Array<ShareGroupDto>> {
    return this.apiShareGroupsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShareGroupDto>>): Array<ShareGroupDto> => r.body)
    );
  }

  /** Path part for operation `apiShareGroupsPost()` */
  static readonly ApiShareGroupsPostPath = '/api/share-groups';

  /**
   * Creates a new share group with the specified members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsPost$Plain$Response(params?: ApiShareGroupsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareGroupDto>> {
    return apiShareGroupsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new share group with the specified members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsPost$Plain(params?: ApiShareGroupsPost$Plain$Params, context?: HttpContext): Observable<ShareGroupDto> {
    return this.apiShareGroupsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareGroupDto>): ShareGroupDto => r.body)
    );
  }

  /**
   * Creates a new share group with the specified members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsPost$Json$Response(params?: ApiShareGroupsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareGroupDto>> {
    return apiShareGroupsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Creates a new share group with the specified members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsPost$Json(params?: ApiShareGroupsPost$Json$Params, context?: HttpContext): Observable<ShareGroupDto> {
    return this.apiShareGroupsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareGroupDto>): ShareGroupDto => r.body)
    );
  }

  /** Path part for operation `apiShareGroupsGroupIdGet()` */
  static readonly ApiShareGroupsGroupIdGetPath = '/api/share-groups/{groupId}';

  /**
   * Retrieves a single share group by its identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGroupIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGroupIdGet$Plain$Response(params: ApiShareGroupsGroupIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareGroupDto>> {
    return apiShareGroupsGroupIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a single share group by its identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGroupIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGroupIdGet$Plain(params: ApiShareGroupsGroupIdGet$Plain$Params, context?: HttpContext): Observable<ShareGroupDto> {
    return this.apiShareGroupsGroupIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareGroupDto>): ShareGroupDto => r.body)
    );
  }

  /**
   * Retrieves a single share group by its identifier.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGroupIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGroupIdGet$Json$Response(params: ApiShareGroupsGroupIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareGroupDto>> {
    return apiShareGroupsGroupIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves a single share group by its identifier.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGroupIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGroupIdGet$Json(params: ApiShareGroupsGroupIdGet$Json$Params, context?: HttpContext): Observable<ShareGroupDto> {
    return this.apiShareGroupsGroupIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareGroupDto>): ShareGroupDto => r.body)
    );
  }

  /** Path part for operation `apiShareGroupsGroupIdPut()` */
  static readonly ApiShareGroupsGroupIdPutPath = '/api/share-groups/{groupId}';

  /**
   * Updates a share group with new metadata or members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGroupIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsGroupIdPut$Plain$Response(params: ApiShareGroupsGroupIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareGroupDto>> {
    return apiShareGroupsGroupIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a share group with new metadata or members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGroupIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsGroupIdPut$Plain(params: ApiShareGroupsGroupIdPut$Plain$Params, context?: HttpContext): Observable<ShareGroupDto> {
    return this.apiShareGroupsGroupIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareGroupDto>): ShareGroupDto => r.body)
    );
  }

  /**
   * Updates a share group with new metadata or members.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGroupIdPut$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsGroupIdPut$Json$Response(params: ApiShareGroupsGroupIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ShareGroupDto>> {
    return apiShareGroupsGroupIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Updates a share group with new metadata or members.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGroupIdPut$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiShareGroupsGroupIdPut$Json(params: ApiShareGroupsGroupIdPut$Json$Params, context?: HttpContext): Observable<ShareGroupDto> {
    return this.apiShareGroupsGroupIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShareGroupDto>): ShareGroupDto => r.body)
    );
  }

  /** Path part for operation `apiShareGroupsGroupIdDelete()` */
  static readonly ApiShareGroupsGroupIdDeletePath = '/api/share-groups/{groupId}';

  /**
   * Deletes the specified share group.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiShareGroupsGroupIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGroupIdDelete$Response(params: ApiShareGroupsGroupIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiShareGroupsGroupIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Deletes the specified share group.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiShareGroupsGroupIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiShareGroupsGroupIdDelete(params: ApiShareGroupsGroupIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiShareGroupsGroupIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
